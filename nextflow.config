manifest {
  author = 'Satrio Wibowo <satrio.biology@yahoo.com>'
  name = 'bgsi/pl-mqc'
  description = 'QC Pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}

params {
  profile = false
  cache = ''
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_input = 'NO_FILE'
  input = 'NO_FILE'
  platform= 'illumina'
  versioned_outdir = false

  monochrome_logs = false
  hook_url = './out'
  help = false
  version = false
  validate_params = false

  outdir = './out'
  publish_dir_mode = 'copy'

  gpu = 'single'
  max_cpus = 64
  max_memory = 256.GB

  storageClass = 'GLACIER_IR'
}

plugins {
    id 'nf-validation'
    id 'nf-prov'
}

docker.enabled = true
docker.registry = 'quay.io'

process {
    withName: 'MOSDEPTH' {
        ext.args = "--no-per-base"
    }
}

process {    
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1

    withName: 'MULTIQC' {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
prov {
    enabled = true
    formats {
        bco {
            file = "${params.outdir}/pipeline_info/manifest_${trace_timestamp}.bco.json"
        }
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

plugins {
    id 'nf-amazon'
}